{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Been Hugged Infrastructure",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "default",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType": {
            "Description": "EC2 Container type",
            "Type": "String",
            "Default": "t3.nano",
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "ECSRepository": {
            "Description": "ECS Repository where containers are stored",
            "Type": "String"
        },
        "SecretArn": {
            "Description": "ARN of Secret containing Auth Creds to External Services",
            "Type": "String"
        },
        "AvailabilityZone": {
            "Description": "AvailabilityZone instance will be launched in",
            "Type": "String",
            "Default": "ap-southeast-2c"
        },
        "InstanceVPC": {
            "Description": "EC2 VPC ID",
            "Type": "AWS::EC2::VPC::Id"
        },
        "InstanceSubnet": {
            "Description": "EC2 Subnet IDs",
            "Type": "AWS::EC2::Subnet::Id",
            "ConstraintDescription": "must be an existing Subnet"
        },
        "ZoneID": {
            "Description": "DNS Zone ID",
            "Type": "String"
        },
        "FQDN": {
            "Description": "FQDN to give the instance",
            "Type": "String"
        },
        "EmailAddress": {
            "Description": "Email Address for Certbot",
            "Type": "String"
        },
        "InstanceSG": {
            "Description": "EC2 Security Groups",
            "Type": "AWS::EC2::SecurityGroup::Id",
            "ConstraintDescription": "must be an existing Security Group"
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t3.nano": {
                "Arch": "HVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "ap-southeast-2": {
                "HVM64": "ami-02c73ee1100ce3e7a"
            }
        }
    },
    "Resources": {
        "RootRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "AllowECRAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecr:GetAuthorizationToken"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:BatchGetImage",
                                        "ecr:BatchCheckLayerAvailability"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "ECSRepository"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameters",
                                        "secretsmanager:GetSecretValue"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "SecretArn"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "AllowCertBot",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "route53:ListHostedZones",
                                        "route53:GetChange"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "route53:ChangeResourceRecordSets"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:route53:::hostedzone/",
                                                    {
                                                        "Ref": "ZoneID"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
                ]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "RootRole"
                    }
                ]
            }
        },
        "InstanceDnsRecord": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "ZoneID"
                },
                "Name": {
                    "Ref": "FQDN"
                },
                "Type": "A",
                "TTL": "180",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "EcsInstance",
                            "PublicIp"
                        ]
                    }
                ]
            }
        },
        "InstanceCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": "AllTheHugs"
            }
        },
        "EcsInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "Comment": "EC2 Container Instance",
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.EcsInstance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -s ",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            " -r EcsInstance ",
                                            " --region     ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            },
                            "/etc/docker/daemon.json": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "{\n",
                                            "    \"log-driver\": \"json-file\",",
                                            "    \"log-opts\": {\n",
                                            "        \"max-size\": \"20m\",\n",
                                            "        \"max-file\": \"3\"\n",
                                            "    }\n",
                                            "}"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                },
                                "docker": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        },
                        "commands": {
                            "add_instance_to_cluster": {
                                "command": "echo ECS_CLUSTER=$ECSCluster > /etc/ecs/ecs.config",
                                "env": {
                                    "ECSCluster": {
                                        "Ref": "InstanceCluster"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "SubnetId": {
                    "Ref": "InstanceSubnet"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSG"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource EcsInstance ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Get our certificates\n",
                                "docker run -v /opt/letsencrypt:/etc/letsencrypt/ certbot/dns-route53 certonly -n --agree-tos --email ",
                                {
                                    "Ref": "EmailAddress"
                                },
                                " --dns-route53 -d ",
                                {
                                    "Ref": "FQDN"
                                },
                                "\n",
                                "(cd /opt && mkdir certs && cp -L letsencrypt/live/",
                                {
                                    "Ref": "FQDN"
                                },
                                "/*.pem certs/.)\n",
                                "# Start up the cfn-hup daemon to listen for changes to the metadata\n",
                                "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource EcsInstance ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT10M"
                }
            }
        }
    }
}
